// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package blocky.kms.crypto;

import "google/api/field_behavior.proto";

option go_package = "github.com/blockysource/go-genproto/blocky/kms/cryptopb;cryptopb";

// KeyAlgorithmType is an algorithm used to generate and verify JSON Web Keys (JWK) as defined in RFC 7518.
enum KeyAlgorithmType {
  // Unspecified key type.
  KEY_ALGORITHM_TYPE_UNSPECIFIED = 0;

  // KeyType of type Elliptic Curve (EC) key
  EC = 1;

  // KeyType of type RSA key
  RSA = 2;

  // KeyType of type Octet sequence (used to represent symmetric keys)
  OCTET = 3;

  // KeyType of type OKP key.
  OKP = 4;
}

// Curve defines the curve used to encode the key material content.
enum Curve {
  // Unspecified curve.
  CURVE_UNSPECIFIED = 0;

  // The NIST P-256 elliptic curve.
  P256 = 1;

  // The NIST P-384 elliptic curve.
  P384 = 2;

  // The NIST P-521 elliptic curve.
  P521 = 3;

  // The elliptic curve used by the Edwards-curve Digital Signature Algorithm (EdDSA).
  ED25519 = 4;
}

// The content of the cryptographical key.
message KeyMaterial {
  // The key material content type.
  KeyAlgorithmType type = 1 [(google.api.field_behavior) = REQUIRED];

  // The elliptic curve used to encode the key material content.
  // This field only applies to Elliptic Curve and OKP key types.
  Curve curve = 2 [(google.api.field_behavior) = OPTIONAL];

  // The symmetric key material content.
  bytes k = 3;

  // Elliptic Curve Public X Coordinate parameter.
  // For ED25519 curve, it is the public key.
  bytes x = 4;

  // Elliptic Curve Public Y Coordinate parameter.
  bytes y = 5;

  // RSA modulus parameter
  bytes n = 6;

  // Exponent parameter used to generate the RSA key.
  bytes e = 7;

  // Elliptic Curve Private Key parameter.
  // For ED25519 curve, it is the private key.
  bytes d = 8;

  // First prime factor of the RSA modulus.
  bytes p = 9;

  // Second prime factor of the RSA modulus.
  bytes q = 10;

  // First Factor Chinese Remainder Theorem (CRT) exponent.
  bytes dp = 11;

  // Second Factor CRT exponent.
  bytes dq = 12;

  // First CRT coefficient.
  bytes qi = 13;
}