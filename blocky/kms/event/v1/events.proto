// Copyright 2024 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package blocky.kms.event.v1;

import "blocky/type/crypto/algorithm.proto";
import "blocky/type/crypto/key_material.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/blockysource/go-genproto/blocky/kms/event/v1;kmseventpb";

// Key represents a cryptographic key.
message Key {
  // Resource name of the Key.
  // The format of the key resource name:
  // `keys{key}`
  // `projects/{project}/keys/{key}`
  string name = 1 [
    (google.api.field_behavior) = IDENTIFIER,
    (google.api.resource_reference) = {type: "kms.blockyapis.com/Key"}
  ];

  // The unique server-generated UUID identifier for the key.
  // It could be used as the key identifier in its resource name.
  string uid = 2 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.field_behavior) = IMMUTABLE
  ];

  // The aliases that can be used to refer to the key.
  // The full path of the alias is:
  // 'keys/{key_alias}'
  repeated string aliases = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The key algorithm type
  blocky.type.crypto.KeyAlgorithmType algorithm_type = 4 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_behavior) = IMMUTABLE
  ];

  // The parameters used to generate the key material.
  blocky.type.crypto.KeyAlgorithmParameters algorithm_parameters = 5 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_behavior) = IMMUTABLE
  ];

  // Supported signing algorithms of the key.
  repeated blocky.type.crypto.SignatureAlgorithm signing_algorithms = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Supported encryption algorithms of the key.
  repeated blocky.type.crypto.EncryptionAlgorithm encryption_algorithms = 7 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The display name of the key.
  string display_name = 8 [(google.api.field_behavior) = NON_EMPTY_DEFAULT];

  // Time when the key was created.
  google.protobuf.Timestamp create_time = 9 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Time when the key was updated.
  google.protobuf.Timestamp update_time = 10 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Time when the key was last rotated.
  google.protobuf.Timestamp last_rotated_time = 11 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Rotation interval of the material derived from this key.
  // If not provided, the key will not be rotated automatically.
  google.protobuf.Duration rotation_interval = 12 [(google.api.field_behavior) = OPTIONAL];

  // Determines if a key is protected against accidental deletion.
  // If not provided, the key will not be protected.
  bool destroy_protection = 13 [(google.api.field_behavior) = OPTIONAL];
}

// Is a cryptographic key material directly used for the cryptographic operations.
// The parameters of the material are derived from the key.
message KeyMaterial {
  // The resource name of the key material.
  // The format of the key material resource name:
  // `keys/{key}/materials/{material}`
  // `projects/{project}/keys/{key}/materials/{material}`
  string name = 1 [
    (google.api.field_behavior) = IDENTIFIER,
    (google.api.resource_reference) = {type: "kms.blockyapis.com/KeyMaterial"}
  ];

  // The creation time of the key material.
  google.protobuf.Timestamp create_time = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The resource name of the predecessor key material.
  // This is set only if the key material was rotated.
  string predecessor = 3 [
    (google.api.field_behavior) = OPTIONAL,
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // The public content of the key material.
  blocky.type.crypto.KeyMaterial public_key = 4 [(google.api.field_behavior) = REQUIRED];
}

// An event message that is published when a key is created.
message KeyCreated {
  // The key that was created.
  Key key = 1 [(google.api.field_behavior) = REQUIRED];
}

// An event message that is published when a key is updated.
message KeyUpdated {
  // The key that was updated.
  Key key = 1 [(google.api.field_behavior) = REQUIRED];
}

// An event message that is published when a key is deleted.
message KeyDeleted {
  // The name of the key resource that is deleted.
  // The format of the key resource name:
  // `keys/{key}`
  // `projects/{project}/keys/{key}`
  string name = 1 [
    (google.api.field_behavior) = IDENTIFIER,
    (google.api.resource_reference) = {type: "kms.blockyapis.com/Key"}
  ];
}

// An event message that is published when a key material is created.
message KeyMaterialCreated {
  // The key material that was created.
  KeyMaterial key_material = 1 [(google.api.field_behavior) = REQUIRED];
}