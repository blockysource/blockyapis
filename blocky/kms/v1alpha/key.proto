// Copyright 2024 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package blocky.kms.v1alpha;

import "blocky/type/crypto/algorithm.proto";
import "blocky/type/crypto/key_material.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/blockysource/go-genproto/blocky/kms/v1alpha;kmspb";

// KeyUse is an algorithm used to generate and verify JSON Web Keys (JWK) as defined in RFC 7518.
enum KeyUse {
  // Unspecified key use.
  KEY_USE_UNSPECIFIED = 0;

  // Indicates that the key is used for signing.
  SIGN_VERIFY = 1;

  // Indicates that the key is used for encryption.
  ENCRYPT_DECRYPT = 2;

  // Indicates that the key is used for both signing and encryption.
  SIGN_ENCRYPT_DECRYPT = 3;
}

// The operations that the key can be used for.
enum KeyOperations {
  // Default value. This value is unused.
  KEY_OPERATIONS_UNSPECIFIED = 0;

  // The key can be used for signing operations.
  SIGN = 1;

  // The key can be used for verifying operations.
  VERIFY = 2;

  // The key can be used for encrypting operations.
  ENCRYPT = 3;

  // The key can be used for decrypting operations.
  DECRYPT = 4;

  // The key can be used for wrapping operations.
  WRAP = 5;

  // The key can be used for unwrapping operations.
  UNWRAP = 6;

  // The key can be used for deriving operations.
  DERIVE_KEY = 7;

  // The key can be used for deriving operations.
  DERIVE_BITS = 8;
}

// Key represents a cryptographic key.
message Key {
  // Resource name of the Key.
  // The format of the key resource name:
  // `keys/*`
  string name = 1 [
    (google.api.field_behavior) = IDENTIFIER,
    (google.api.resource_reference) = {type: "kms.blockyapis.com/Key"}
  ];

  // The unique server-generated UUID identifier for the key.
  // It could be used as the key identifier in its resource name.
  string uid = 2 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.field_behavior) = IMMUTABLE
  ];

  // The aliases that can be used to refer to the key.
  // The full path of the alias is:
  // 'keys/{key_alias}'
  repeated string aliases = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The key algorithm type
  blocky.type.crypto.KeyAlgorithmType algorithm_type = 4 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_behavior) = IMMUTABLE
  ];

  // The parameters used to generate the key material.
  blocky.type.crypto.KeyAlgorithmParameters algorithm_parameters = 5 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_behavior) = IMMUTABLE
  ];

  // Supported signing algorithms of the key.
  repeated blocky.type.crypto.SignatureAlgorithm signing_algorithms = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Supported encryption algorithms of the key.
  repeated blocky.type.crypto.EncryptionAlgorithm encryption_algorithms = 7 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The display name of the key.
  string display_name = 8 [(google.api.field_behavior) = NON_EMPTY_DEFAULT];

  // Time when the key was created.
  google.protobuf.Timestamp create_time = 9 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Time when the key was updated.
  google.protobuf.Timestamp update_time = 10 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Time when the key was last rotated.
  google.protobuf.Timestamp last_rotated_time = 11 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Rotation interval of the material derived from this key.
  // If not provided, the key will not be rotated automatically.
  google.protobuf.Duration rotation_interval = 12 [(google.api.field_behavior) = OPTIONAL];

  // Determines if a key is protected against accidental deletion.
  // If not provided, the key will not be protected.
  bool destroy_protection = 13 [(google.api.field_behavior) = OPTIONAL];
}

// Is a cryptographic key material directly used for the cryptographic operations.
// The parameters of the material are derived from the key.
message KeyMaterial {
  // The resource name of the key material.
  // The format of the key material resource name:
  // - `keys/*/materials/*`
  // - `projects/*/keys/*/materials/*`
  string name = 1 [
    (google.api.field_behavior) = IDENTIFIER,
    (google.api.resource_reference) = {type: "kms.blockyapis.com/KeyMaterial"}
  ];

  // The creation time of the key material.
  google.protobuf.Timestamp create_time = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Public key material content.
  blocky.type.crypto.KeyMaterial public_key = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// Describes the content of a key with details, that allows to use it for cryptographic operations.
// It contains not only cryptographic key metadata, but also the identifiers of the key and its material,
// which allows to match the content with the key and its material resource.
message KeyMaterialContent {
  // A header of the cryptography key. It contains necessary information to identify the key.
  message Header {
    // It identifies the cryptographic algorithm family used with the key.
    blocky.type.crypto.KeyAlgorithmType key_algorithm_type = 1 [
      (google.api.field_behavior) = REQUIRED,
      json_name = "kty"
    ];

    // Intended use of the key.
    KeyUse key_use = 2 [
      (google.api.field_behavior) = REQUIRED,
      json_name = "use"
    ];

    // The key can be used for the operations specified in this field.
    repeated KeyOperations key_ops = 3 [
      (google.api.field_behavior) = REQUIRED,
      json_name = "key_ops"
    ];

    // The algorithm intended for use with the key.
    repeated blocky.type.crypto.SignatureAlgorithm signature_algorithms = 4 [(google.api.field_behavior) = REQUIRED];

    // The encryption key management algorithms intended for use with the key.
    repeated blocky.type.crypto.KeyManagementAlgorithm key_management_algorithms = 5 [(google.api.field_behavior) = REQUIRED];

    // The identifier for the key.
    string key_id = 6 [
      (google.api.field_behavior) = REQUIRED,
      (google.api.resource_reference) = {type: "kms.blockyapis.com/Key"},
      json_name = "kid"
    ];

    // The identifier of the key material.
    string material_id = 7 [
      (google.api.field_behavior) = REQUIRED,
      (google.api.resource_reference) = {type: "kms.blockyapis.com/KeyMaterial"},
      json_name = "mid"
    ];
  }

  // Header of the crypto key.
  Header header = 1 [
    (google.api.field_behavior) = REQUIRED,
    json_name = "header"
  ];

  // The key material.
  blocky.type.crypto.KeyMaterial material = 2 [
    (google.api.field_behavior) = REQUIRED,
    json_name = "material"
  ];
}