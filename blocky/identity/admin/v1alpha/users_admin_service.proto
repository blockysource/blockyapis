// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package blocky.identity.admin.v1alpha;

import "blocky/identity/admin/v1alpha/user.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/blockysource/go-genproto/blocky/identity/admin/v1alpha;identityadminpb";

// The UsersAdminService is an administrative service to manage users.
service UsersAdminService {
  // Creates a new user.
  rpc CreateUser(CreateUserRequest) returns (User) {
    option (google.api.http) = {
      post: "/v1alpha/users"
      body: "user"
    };
  }

  // Gets a user by ID.
  rpc GetUser(GetUserRequest) returns (User) {
    option (google.api.http) = {get: "/v1alpha/users/{user_id}"};
  }

  // Lists users
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {get: "/v1alpha/users"};
  }

  // Updates a user
  rpc UpdateUser(UpdateUserRequest) returns (User) {
    option (google.api.http) = {
      patch: "/v1alpha/users/{user_id}"
      body: "user"
    };
  }

  // Deletes a user by ID.
  rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/v1alpha/users/{user_id}"};
  }
}

// Request message for `CreateUser` method.
message CreateUserRequest {
  // The user to create.
  User user = 1 [(google.api.field_behavior) = REQUIRED];
}

// Request message for `GetUser` method.
message GetUserRequest {
  // The ID of the user to retrieve.
  string user_id = 1 [(google.api.field_behavior) = REQUIRED];
}

// Request message for `ListUsers` method.
message ListUsersRequest {
  // The parent resource name.
  // I.e.:
  // - projects/{project_id}
  // If undefined takes the users with undefined parent.
  string parent = 1 [(google.api.field_behavior) = REQUIRED];

  // The page size
  int32 page_size = 2 [(google.api.field_behavior) = OPTIONAL];

  // The page token
  string page_token = 3 [(google.api.field_behavior) = OPTIONAL];
}

// Response message for `ListUsers` method.
message ListUsersResponse {
  // The list of users.
  repeated User users = 1;

  // A token that can be used to
  // retrieve the next page of results.
  string next_page_token = 2;
}

// Request message for `UpdateUser` method.
message UpdateUserRequest {
  // The user resource name to update.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "identity.blockysource.com/User"}
  ];
  // The user to update.
  User user = 2 [(google.api.field_behavior) = REQUIRED];
}

// Request message for `DeleteUser` method.
message DeleteUserRequest {
  // The resource name to delete.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "identity.blockysource.com/User"}
  ];
}
