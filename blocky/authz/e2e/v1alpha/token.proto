// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package blocky.authz.e2e.v1alpha;

import "blocky/authz/type/signing_algorithm.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

option go_package = "github.com/blockysource/go-genproto/authz/e2e/v1alpha;authze2ev1alpha";

// TokensService is a service used to issue, refresh, revoke and introspect tokens.
service TokensService {
  // Issues a new authorization token for the input subject.
  rpc IssueToken(IssueTokenRequest) returns (IssueTokenResponse);

  // Creates a new access, refresh token pair on top of the input refresh token.
  // The input refresh token needs to be non-expired, non-revoked and active.
  // Resulting tokens will share the claims provided during the [IssueTokenRequest].
  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse);

  // Revokes the input refresh token.
  // Revoked refresh tokens will not be able to be used to issue new tokens.
  // This makes the refresh token invalid.
  rpc RevokeRefreshToken(RevokeRefreshTokenRequest) returns (google.protobuf.Empty);

  // Checks if the input token is valid, and if so, returns the claims of the token.
  // If the token is invalid, the response will contain an error.
  rpc IntrospectToken(IntrospectTokenRequest) returns (IntrospectTokenResponse);
}

// Request message for
// [TokensService.IssueToken][blocky.authz.e2e.v1alpha.TokensService.IssueToken].
message IssueTokenRequest {
  // ClientCredentials is a set of credentials used to identify a client.
  message ClientCredentials {
    // The public identifier of the client.
    string client_id = 1 [(google.api.field_behavior) = REQUIRED];

    // The secret assigned to given client.
    string client_secret = 2 [(google.api.field_behavior) = OPTIONAL];
  }

  // Required, the subject of the token.
  // The subject is the unique identifier of the user or service account that the token represents.
  string subject = 1 [(google.api.field_behavior) = REQUIRED];

  // Optional key identifier used to sign this token.
  // If not provided, the token will be signed with the default key.
  // If provided, it must be a valid key identifier, otherwise the request will fail,
  // with the error NotFound.
  string key = 2 [
    (google.api.field_behavior) = OPTIONAL,
    (google.api.resource_reference) = {type: "authz.blockysource.com/KeyVersion"}
  ];

  // Optional custom claims to be added to the token.
  // By default, the token will contain the following claims:
  // - sub: the subject of the token
  // - iss: the issuer of the token
  // - aud: the audience of the token
  // - iat: the time the token was issued
  // - exp: the time the token will expire
  // - jti: the unique identifier of the token
  google.protobuf.Struct claims = 3 [(google.api.field_behavior) = OPTIONAL];

  // Required, the scope of the token.
  // The scope is a list of strings that represent the permissions that the token grants.
  string scope = 4 [(google.api.field_behavior) = REQUIRED];

  // Algorithm used to sign the token.
  // If the given algorithm is not supported by the system, the request will fail with the error InvalidArgument.
  // If not provided, the token will be signed with the default algorithm for the key.
  blocky.authz.type.SigningAlgorithm algorithm = 5 [(google.api.field_behavior) = OPTIONAL];

  // Optional, identifier of the client that is requesting the token.
  // If not provided, the token
  // and no scope validation will be performed.
  // Note: this affects permissible scopes, not the validity of the token.
  ClientCredentials client = 6 [(google.api.field_behavior) = REQUIRED];
}

// IssueTokenResponse is a response used to issue a token.
message IssueTokenResponse {
  // Is the access token that can be used to authenticate requests.
  string access_token = 1;

  // Is an optional refresh token that can be used to issue new tokens.
  string refresh_token = 2 [(google.api.field_behavior) = OPTIONAL];

  // Is the expiration time of the access token.
  int64 expires_in = 3;
}

// IntrospectTokenRequest is a request used to introspect a token.
message IntrospectTokenRequest {
  // A required token to introspect.
  string token = 1 [(google.api.field_behavior) = REQUIRED];
}

// The response message for
// [TokensService.IntrospectToken][blocky.authz.e2e.v1alpha.TokensService.IntrospectToken].
message IntrospectTokenResponse {
  // Are the standard claims of the token.
  StandardTokenClaims claims = 1;

  // Are the unspecified custom claims encoded in the token.
  google.protobuf.Struct custom_claims = 2;
}

message RefreshTokenRequest {
  string refresh_token = 1;
  bool force_configuration_options = 2;
}

message RefreshTokenResponse {
  string token_id = 1;
}

message RevokeRefreshTokenRequest {
  string token = 1;
}

// IntrospectedTokenClaims is a set of claims that are returned when introspecting a token.
message StandardTokenClaims {
  // Is the token unique identifier.
  string token_id = 1 [json_name = "jti"];

  // States if the token is active.
  bool active = 2;

  // Is the subject of the token.
  string subject = 3 [json_name = "sub,omitempty"];

  // Is the expiration time of the token.
  int64 expires_at = 4 [json_name = "exp,omitempty"];

  // Is the time the token was issued.
  int64 issued_at = 5 [json_name = "iat,omitempty"];

  // Is the time the token was revoked.
  int64 revoked_at = 6 [
    json_name = "rat,omitempty",
    (google.api.field_behavior) = OPTIONAL
  ];

  // Is the time the token was not valid before.
  int64 not_before = 7 [
    json_name = "nbf,omitempty",
    (google.api.field_behavior) = OPTIONAL
  ];

  // Is the issuer of the token.
  string issuer = 8 [json_name = "iss,omitempty"];

  // Is a comma separated list of scopes that the token grants.
  string scope = 9;

  // Is the audience of the token,
  repeated string audience = 10 [json_name = "aud,omitempty"];
  string client_id = 11 [json_name = "client_id,omitempty"];
}

// IssueKeyTypeTokenRequest is a request used to sign a user defined payload.
message IssueKeyTypeTokenRequest {
  string token_id = 1; // Is the optional unique identifier of given token. If not provided, the token will be assigned a random unique identifier.
  string key_type_id = 2;
  bytes json_claims = 3; // The payload to sign. It could be encoded in any format, as the token will treat it as opaque, and encode into standard base64 in its claims.
}

// IssueKeyTypeTokenResponse is a response used to sign a user defined payload.
message IssueKeyTypeTokenResponse {
  string signed_token = 1;
  string token_id = 2; // Is the unique identifier of given token.
}

// IntrospectKeyTypeTokenRequest is a request used to introspect a user defined payload.
message IntrospectKeyTypeTokenRequest {
  string key_type_id = 1;
  string token = 2;
}

// IntrospectKeyTypeTokenResponse is a response used to introspect a user defined payload.
message IntrospectKeyTypeTokenResponse {
  string token_id = 1;
  bytes json_payload = 2;
  bool active = 3;
  int64 expires_at = 4;
  int64 issued_at = 5;
  string issuer = 6;
}