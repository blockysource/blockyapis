// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package blocky.authz.admin.v1alpha;

import "blocky/authz/type/signing_algorithm.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/blockysource/go-genproto/blocky/authz/admin/v1alpha;authzadminv1alpha";

// Key is a representation of an authorization key.
// It contains information about the key, such as its ID, algorithm, name and
// creation time, as well as information about its activation and rotation.
// The server automatically creates an alias 'default' for a key marked as
// default.
// The 'default' key could be identified by the name:
// 'projects/{project}/keys/default'.
message Key {
  option (google.api.resource) = {
    type: "authz.blockyapis.com/Key"
    pattern: "projects/{project}/keys/{key}"
    singular: "key"
    plural: "keys"
  };

  // Name of the key.
  // Format: 'projects/{project}/keys/{key}'
  string name = 1 [(google.api.field_behavior) = IDENTIFIER];

  // Key ID of the key.
  // This identifier of the key is used to identify all the key versions.
  // However, this identifier is not displayed in the public JWK set.
  // The JWK set contains the key versions where the 'kid' field is recognized as
  // the key version identifier.
  // Once a key version is rotated, the Key ID remains the same, but the JWK 'kid'
  // field is updated to the new key version identifier.
  //
  // This value should be 4-63 characters, and valid characters are
  // /[a-z][0-9]-/.
  string uid = 2 [
    (google.api.field_behavior) = IMMUTABLE,
    (google.api.field_behavior) = NON_EMPTY_DEFAULT
  ];

  // Algorithms used for signing and verification, defined in an ordered list.
  // The first algorithm in the list has the highest priority, and if unspecified
  // is the default algorithm used for signing.
  repeated authz.type.SigningAlgorithm algorithms = 3 [(google.api.field_behavior) = NON_EMPTY_DEFAULT];

  // The display name of the key.
  string display_name = 4 [(google.api.field_behavior) = NON_EMPTY_DEFAULT];

  // Time when the key was created.
  google.protobuf.Timestamp create_time = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Determines if the key is active and used in the key set.
  bool active = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Time when the key was last rotated.
  google.protobuf.Timestamp last_rotated_time = 7 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Time when the key was revoked.
  google.protobuf.Timestamp revoke_time = 8 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Rotation period of the key.
  // If not provided, the key will not be rotated automatically.
  google.protobuf.Duration rotation_period = 9;

  // Priority of the key.
  // The higher the priority, the more likely the key will be used for signing.
  // If not provided, the key will be assigned the default priority 0.
  // The keys in the JWK set are sorted by priority in descending order.
  int32 priority = 10 [(google.api.field_behavior) = NON_EMPTY_DEFAULT];

  // Is the number of key versions.
  int32 versions = 11 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Is the default key used by the
  bool is_default = 12 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// KeyVersion is a representation of a key version.
// The server creates an alias for the 'latest' key version, which is the most
// recent key version. This alias could be used in the key version name as:
// 'projects/{project}/keys/{key}/versions/latest'.
// Only the most recent key version could be used to sign the tokens,
// However all, non-revoked key versions could be used for verification.
message KeyVersion {
  option (google.api.resource) = {
    type: "authz.blockyapis.com/KeyVersion"
    pattern: "projects/{project}/keys/{key}/versions/{key_version}"
  };

  // The resource name of the key version.
  // Format: `projects/{project}/keys/{key}/versions/{key_version}`
  string name = 1 [(google.api.field_behavior) = IDENTIFIER];

  // The unique server-generated UUID identifier for the key version.
  // It could be used as the key version identifier in its resource name.
  string uid = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The creation time of the key version.
  google.protobuf.Timestamp create_time = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Algorithms that this key vesion supports.
  // These are current key algorithms that are assigned
  // during the key rotation (creation).
  repeated authz.type.SigningAlgorithm algorithms = 4 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The key version number for the parent.
  // All the key versions rotated from the same parent key have the same version number.
  int32 version_number = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Revocation time of the key version.
  // If the key version was revoked, it is no longer used for signing and verification.
  // This version is not included in the public JWK set.
  // Once rotated, a new key version is no longer marked as revoked.
  // Remains null if the key version was not revoked.
  google.protobuf.Timestamp revoke_time = 6 [(google.api.field_behavior) = OUTPUT_ONLY];
}