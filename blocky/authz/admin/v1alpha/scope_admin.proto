// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package blocky.authz.admin.v1alpha;

import "blocky/api/annotations.proto";
import "blocky/authz/admin/v1alpha/scope.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/blockysource/go-genproto/blocky/authz/admin/v1alpha;authzadminv1alpha";

// The Scope Admin API.
//
// This API provides administrative services for authorization Scope.
service ScopeAdminService {
  option (google.api.oauth_scopes) = "https://www.blockyapis.com/auth/authz.admin";

  // Creates a new authorization scope.
  rpc CreateScope(CreateScopeRequest) returns (Scope) {
    option (google.api.http) = {
      post: "/v1alpha/scopes",
      body: "scope"
    };
    option (google.api.method_signature) = "scope";
  }

  // Lists authorization scopes that are registered with the service.
  rpc ListScope(ListScopeRequest) returns (ListScopeResponse) {
    option (google.api.http) = {get: "/v1alpha/scopes"};
    option (blocky.api.query_params) = {
      order_by: "scope asc, create_time desc"
      pagination: {
        max_size: 100,
        default_size: 50,
      }
    };
  }

  // Gets an authorization scope.
  rpc GetScope(GetScopeRequest) returns (Scope) {
    option (google.api.http) = {get: "/v1alpha/{name=scopes/*}"};
    option (google.api.method_signature) = "name";
  }

  // Updates an existing authorization scope with new information.
  rpc UpdateScope(UpdateScopeRequest) returns (Scope) {
    option (google.api.http) = {
      patch: "/v1alpha/{scope.name=scopes/*}",
      body: "scope"
    };
    option (google.api.method_signature) = "scope";
  }

  // Deletes an authorization scope.
  rpc DeleteScope(DeleteScopeRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/v1alpha/{name=scopes/*}"};
    option (google.api.method_signature) = "scope";
  }
}

// The request for
// [ScopeAdminService.CreateScope][blocky.authz.admin.v1alpha.ScopeAdminService.CreateScope].
message CreateScopeRequest {
  // Required, the authorization scope to create.
  Scope scope = 1 [(google.api.field_behavior) = REQUIRED];
}

// The request for
// [ScopeAdminService.GetScope][blocky.authz.admin.v1alpha.ScopeAdminService.GetScope].
message GetScopeRequest {
  // Required, authorization scope identifier and resource name.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "authz.blockysource.com/Scope"}
  ];
}

// The request for
// [ScopeAdminService.ListScope][blocky.authz.admin.v1alpha.ScopeAdminService.ListScope].
message ListScopeRequest {
  // The maximum number of items to return.
  int32 page_size = 1;

  // The next_page_token value returned from a previous List request, if any.
  string page_token = 2;
}

// The request for
// [ScopeAdminService.ListScope][blocky.authz.admin.v1alpha.ScopeAdminService.ListScope].
message ListScopeResponse {
  // List of authorization scopes.
  repeated Scope scopes = 1;

  // The pagination token to retrieve the next page of results. If the value is
  // empty, no further results remain.
  string next_page_token = 2;
}

// The request for
// [ScopeAdminService.UpdateScope][blocky.authz.admin.v1alpha.ScopeAdminService.UpdateScope].
message UpdateScopeRequest {
  // Required, authorization scope identifier and resource name.
  Scope scope = 1 [(google.api.field_behavior) = REQUIRED];
}

// The request for
// [ScopeAdminService.DeleteScope][blocky.authz.admin.v1alpha.ScopeAdminService.DeleteScope].
message DeleteScopeRequest {
  // Required, authorization scope identifier and resource name.
  string scope = 1 [(google.api.field_behavior) = REQUIRED];
}