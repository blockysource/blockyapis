// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package blocky.authz.admin.v1alpha;

import "blocky/authz/type/signing_algorithm.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/blockysource/go-genproto/blocky/authz/admin/v1alpha;authzadminv1alpha";

// KeysAdminService is an administration service for the authorization keys.
service KeysAdminService {
  // Configures the token scopes.
  option (google.api.oauth_scopes) = "https://www.blockyapis.com/auth/authz.admin";

  // ListKeys lists authorization keys that matches given request.
  rpc ListKeys(ListKeysRequest) returns (ListKeysResponse);

  // CreateKey creates a new authorization key.
  // New key is neither active nor used in a set.
  rpc CreateKey(CreateKeyRequest) returns (Key) {
    option (google.api.http) = {
      post: "/v1alpha/keys"
      body: "key"
    };
  }

  // ActivateKey activates an authorization key identified by the given key ID.
  // Once activated the key is used for signing and verification.
  // If the key is already active, this is a no-op.
  // If the key is revoked, this function returns a FailedPrecondition error.
  rpc ActivateKey(ActivateKeyRequest) returns (ActivateKeyResponse);

  // RevokeKeyVersion revokes an authorization key version identified by the given identifier.
  // Once revoked the key version is no longer valid for signing and verification.
  // If revoked key was the only active signing key, the system will not accept
  // any new requests until a new key is created and activated.
  rpc RevokeKeyVersion(RevokeKeyVersionRequest) returns (RevokeKeyVersionResponse);

  // ListKeyVersions lists authorization key versions that matches given request.
  // The key versions are derived from the parent key.
  rpc ListKeyVersions(ListKeyVersionsRequest) returns (ListKeyVersionsResponse);
}

// Key is a representation of an authorization key.
// It contains information about the key, such as its ID, algorithm, name and
// creation time, as well as information about its activation and rotation.
message Key {
  option (google.api.resource) = {
    type: "authz.blockyapis.com/Key"
    pattern: "keys/{key}"
    style: DECLARATIVE_FRIENDLY
  };

  // Name of the key.
  // Format: `keys/{key}`
  string name = 1;

  // Key ID of the key.
  // This identifier of the key is used to identify all the key versions.
  // However, this identifier is not displayed in the public JWK set.
  // The JWK set contains the key versions where the 'kid' field is recognized as
  // the key version identifier.
  // Once a key version is rotated, the Key ID remains the same, but the JWK 'kid'
  // field is updated to the new key version identifier.
  string key_id = 2;

  // Algorithms used for signing and verification, defined in an ordered list.
  // The first algorithm in the list has the highest priority, and if unspecified
  // is the default algorithm used for signing.
  repeated authz.type.SigningAlgorithm algorithms = 3;

  // The display name of the key.
  string display_name = 4 [(google.api.field_behavior) = OPTIONAL];

  // Time when the key was created.
  google.protobuf.Timestamp create_time = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Determines if the key is active and used in the key set.
  bool active = 6;

  // Time when the key was last rotated.
  google.protobuf.Timestamp last_rotated_time = 7 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Time when the key was revoked.
  google.protobuf.Timestamp revoke_time = 8;

  // Rotation period of the key.
  // If not provided, the key will not be rotated automatically.
  google.protobuf.Duration rotation_period = 9;

  // Priority of the key.
  // The higher the priority, the more likely the key will be used for signing.
  // If not provided, the key will be assigned the default priority 0.
  // The keys in the JWK set are sorted by priority in descending order.
  int32 priority = 10;

  // Is the number of key versions.
  int32 versions = 11 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// Request message for
// [AuthzAdminService.CreateKey][blocky.authz.admin.v1alpha.AuthzAdminService.CreateKey].
message CreateKeyRequest {
  // Optional, the key ID of the key to be created.
  // If not provided, a service generated key ID will be used.
  //
  // This value should be 4-63 characters, and valid characters are
  // /[a-z][0-9]-/.
  string key_id = 1 [(google.api.field_behavior) = OPTIONAL];

  // Required, resource to create.
  Key key = 2 [(google.api.field_behavior) = REQUIRED];

  //  // Algorithms determines the signing and verification algorithms used by the key.
  //  repeated authz.type.SigningAlgorithm algorithms = 2 [(google.api.field_behavior) = REQUIRED];
  //
  //  // Name is a human readable name for the key.
  //  // If not provided, a random name will be generated.
  //  string name = 3 [(google.api.field_behavior) = OPTIONAL];
  //
  //  // RotationPeriod is the period after which the key will be rotated.
  //  // Once rotated the key is no longer used for signing the keys.
  //  // However after rotation, it is still used for verification.
  //  // The key will not be used neither for signing nor verification after
  //  // it is revoked.
  //  // If not provided, the key will not be rotated, unless the service configuration
  //  // specifies a default rotation period.
  //  google.protobuf.Duration rotation_period = 4 [(google.api.field_behavior) = OPTIONAL];
  //
  //  // Priority of the key.
  //  // The higher the priority, the more likely the key will be used for signing.
  //  // If not provided, the key will be assigned the default priority 1.
  //  int32 priority = 5 [(google.api.field_behavior) = OPTIONAL];
}

// Request message for
// [AuthzAdminService.ListKeys][blocky.authz.admin.v1alpha.AuthzAdminService.ListKeys].
message ListKeysRequest {
  // Optional. The maximum number of Keys to return in the response. The
  // server allows a maximum of 300 Keys to return. If unspecified, the
  // server will use 50 as the default, unless its configuration specifies
  // a smaller default.
  int32 page_size = 1 [(google.api.field_behavior) = OPTIONAL];

  // Optional. A pagination token returned from a previous call to
  // `ListKeysRequest` that indicates where this listing should continue from.
  string page_token = 2 [(google.api.field_behavior) = OPTIONAL];

  // Optional. Skips the specified number of keys in the result.
  int32 skip = 3 [(google.api.field_behavior) = OPTIONAL];
}

// Response message for
// [AuthzAdminService.ListKeys][blocky.authz.admin.v1alpha.AuthzAdminService.ListKeys].
message ListKeysResponse {
  // List of keys matching the request.
  repeated Key keys = 1;

  // Token to retrieve the next page of results, or empty if there are no
  // more results in the list.
  string next_page_token = 2;

  // Total number of keys matching the request, regardless of the page size.
  int32 total_size = 3;
}

// Request message for
// [AuthzAdminService.ActivateKey][blocky.authz.admin.v1alpha.AuthzAdminService.ActivateKey].
message ActivateKeyRequest {
  // Key ID of the key to activate.
  string key_id = 1;
}

// Response message for
// [AuthzAdminService.ActivateKey][blocky.authz.admin.v1alpha.AuthzAdminService.ActivateKey].
message ActivateKeyResponse {}

// KeyVersion is a representation of a single key version.
// It is derived from the parent Key with specific algorithm typ
e.
// Once rotated, the key version is no longer used for signing, but is still
// used for verification. Once revoked, the key version is no longer used for
// signing and verification.
message KeyVersion {
  // Parent key identifier of the key version. This identifier matches the field:
  // [Key.key_id][blocky.authz.admin.v1alpha.Key.key_id].
  // The parent defines the key version algorithm, name and creation time.
  string parent_key_id = 1;

  // Version identifier of the key.
  // This identifier is generated and derived from the parent key identifier, used
  // algorithm and the version number.
  // This identifier matches the field:
  // [JWK.kid][blocky.authz.admin.v1alpha.JWK.kid].
  string version_id = 2;

  // The algorithm used for signing and verification, set up for this key version.
  // This field matches in its string form the field:
  // [JWK.alg][blocky.authz.admin.v1alpha.JWK.alg].
  authz.type.SigningAlgorithm algorithm = 3;

  // The creation time of the key version.
  google.protobuf.Timestamp create_time = 4;

  // The key version number for the parent.
  // All the key versions rotated from the same parent key have the same version number.
  int32 version_number = 5;

  // Revocation time of the key version.
  // If the key version was revoked, it is no longer used for signing and verification.
  // This version is not included in the public JWK set.
  // Once rotated, a new key version is no longer marked as revoked.
  // Remains null if the key version was not revoked.
  google.protobuf.Timestamp revoke_time = 6;
}

// Request message for
// [AuthzAdminService.RevokeKeyVersion][blocky.authz.admin.v1alpha.AuthzAdminService.RevokeKeyVersion].
message RevokeKeyVersionRequest {
  // Required identifier of the key version to revoke.
  string key_version_id = 1 [(google.api.field_behavior) = REQUIRED];

  // Rotate after revoking the key.
  // If set to true, the key will be rotated after revoking it.
  // Otherwise, only selected key version is revoked.
  bool rotate = 2 [(google.api.field_behavior) = OPTIONAL];
}

// Response message for
// [AuthzAdminService.RevokeKeyVersion][blocky.authz.admin.v1alpha.AuthzAdminService.RevokeKeyVersion].
message RevokeKeyVersionResponse {
  // Key ID of the revoked key.
  string key_id = 1;

  // Time when the key was revoked.
  google.protobuf.Timestamp revoke_time = 2;
}

// Request message for
// [AuthzAdminService.ListKeyVersions][blocky.authz.admin.v1alpha.AuthzAdminService.ListKeyVersions].
message ListKeyVersionsRequest {
  // Required identifier of the key to list versions for.
  // This field matches the field:
  // [Key.key_id][blocky.authz.admin.v1alpha.Key.key_id].
  string key_id = 1 [(google.api.field_behavior) = REQUIRED];

  // Optional limit on the number of key versions to include in the response.
  // If not provided, the service will use a default limit.
  int32 limit = 2 [(google.api.field_behavior) = OPTIONAL];

  // Optional page token to continue listing key versions from.
  // If not provided, the service will start listing from the beginning.
  string page_token = 3 [(google.api.field_behavior) = OPTIONAL];
}

// Response message for
// [AuthzAdminService.ListKeyVersions][blocky.authz.admin.v1alpha.AuthzAdminService.ListKeyVersions].
message ListKeyVersionsResponse {
  // List of key versions for the requested key.
  repeated KeyVersion key_versions = 1;

  // Token to continue listing key versions from.
  // If there are no more key versions to list, the token is not included.
  string next_page_token = 2;
}