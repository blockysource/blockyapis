// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package blocky.authz.admin.v1alpha;

import "blocky/api/annotations.proto";
import "blocky/authz/admin/v1alpha/key.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";

option go_package = "github.com/blockysource/go-genproto/blocky/authz/admin/v1alpha;authzadminv1alpha";

// KeysAdminService is an administration service for the authorization keys.
service KeysAdminService {
  // Configures the token scopes.
  option (google.api.oauth_scopes) = "https://www.blockyapis.com/auth/authz.admin";

  // ListKeys lists authorization keys that matches given request.
  rpc ListKeys(ListKeysRequest) returns (ListKeysResponse) {
    option (blocky.api.query_params) = {
      pagination: {
        max_size: 100,
        default_size: 50
      },
      order_by: "created_at desc"
    };
    option (google.api.http) = {get: "/v1alpha/{parent=projects/*/instances/*}/keys"};
    option (google.api.method_signature) = "parent";
  }

  // CreateKey creates a new authorization key.
  // New key is neither active nor used in a set.
  rpc CreateKey(CreateKeyRequest) returns (Key) {
    option (google.api.http) = {
      post: "/v1alpha/{parent=projects/*/instances/*}/keys",
      body: "key"
    };
    option (google.api.method_signature) = "parent,key";
  }

  // ActivateKey activates an authorization key identified by the given key ID.
  // Once activated the key is used for signing and verification.
  // If the key is already active, this is a no-op.
  // If the key is revoked, this function returns a FailedPrecondition error.
  rpc ActivateKey(ActivateKeyRequest) returns (Key) {
    option (google.api.http) = {
      post: "/v1alpha/{name=projects/*/instances/*/keys/*}:activate",
      body: "*",
    };
    option (google.api.method_signature) = "name";
  }
}

// Request message for
// [AuthzAdminService.CreateKey][blocky.authz.admin.v1alpha.AuthzAdminService.CreateKey].
message CreateKeyRequest {
  // Required, resource to create.
  Key key = 1 [(google.api.field_behavior) = REQUIRED];
}

// Request message for
// [AuthzAdminService.ListKeys][blocky.authz.admin.v1alpha.AuthzAdminService.ListKeys].
message ListKeysRequest {
  // Optional. The maximum number of Keys to return in the response. The
  // server allows a maximum of 300 Keys to return. If unspecified, the
  // server will use 50 as the default, unless its configuration specifies
  // a smaller default.
  int32 page_size = 1 [(google.api.field_behavior) = OPTIONAL];

  // Optional. A pagination token returned from a previous call to
  // ListKeysRequest that indicates where this listing should continue from.
  string page_token = 2 [(google.api.field_behavior) = OPTIONAL];

  // Optional. Skips the specified number of keys in the result.
  int32 skip = 3 [(google.api.field_behavior) = OPTIONAL];
}

// Response message for
// [AuthzAdminService.ListKeys][blocky.authz.admin.v1alpha.AuthzAdminService.ListKeys].
message ListKeysResponse {
  // List of keys matching the request.
  repeated Key keys = 1;

  // Token to retrieve the next page of results, or empty if there are no
  // more results in the list.
  string next_page_token = 2;

  // Total number of keys matching the request, regardless of the page size.
  int32 total_size = 3;
}

// Request message for
// [AuthzAdminService.ActivateKey][blocky.authz.admin.v1alpha.AuthzAdminService.ActivateKey].
message ActivateKeyRequest {
  // Resource name of the key to activate.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "blocky.authz.admin.v1alpha.Key"}
  ];
}