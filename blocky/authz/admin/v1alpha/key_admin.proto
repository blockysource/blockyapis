// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package blocky.authz.admin.v1alpha;

import "blocky/api/annotations.proto";
import "blocky/authz/admin/v1alpha/key.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/field_mask.proto";

option go_package = "github.com/blockysource/go-genproto/blocky/authz/admin/v1alpha;authzadminv1alpha";

// KeyAdminService is an administration service for the authorization keys.
service KeyAdminService {
  // Configures the token scopes.
  option (google.api.oauth_scopes) = "https://www.blockyapis.com/auth/authz.admin";

  // CreateKey creates a new authorization key.
  // New key is neither active nor used in a set.
  rpc CreateKey(CreateKeyRequest) returns (Key) {
    option (google.api.http) = {
      post: "/v1alpha/{parent=projects/*}/keys",
      body: "*"
    };
    option (google.api.method_signature) = "parent,key";
  }

  // GetKey returns the specified authorization key.
  // The name of the key may be used as:
  // 'projects/{project}/keys/default' to get the default key for the project.
  rpc GetKey(GetKeyRequest) returns (Key) {
    option (google.api.http) = {get: "/v1alpha/{name=projects/*/keys/*}"};
    option (google.api.method_signature) = "name";
  }

  // ListKeys lists authorization keys that matches given request.
  rpc ListKeys(ListKeysRequest) returns (ListKeysResponse) {
    option (blocky.api.query_params) = {
      pagination: {
        max_size: 100,
        default_size: 50
      },
      order_by: "created_at desc"
    };
    option (google.api.http) = {get: "/v1alpha/{parent=projects/*}/keys"};
    option (google.api.method_signature) = "parent";
  }

  // UpdateKey updates the specified authorization key.
  rpc UpdateKey(UpdateKeyRequest) returns (Key) {
    option (google.api.http) = {
      patch: "/v1alpha/{key.name=projects/*/keys/*}",
      body: "key"
    };
    option (google.api.method_signature) = "key,update_mask";
  }

  // Creates a new key revision and rotates the key.
  rpc CreateKeyRevision(CreateKeyRevisionRequest) returns (KeyRevision) {
    option (google.api.http) = {
      post: "/v1alpha/{parent=projects/*/keys/*}/revisions",
      body: "*"
    };
    option (google.api.method_signature) = "parent,revision";
  }

  // GetKeyRevision returns the specified key revision.
  rpc GetKeyRevision(GetKeyRevisionRequest) returns (KeyRevision) {
    option (google.api.http) = {get: "/v1alpha/{name=projects/*/keys/*/revisions/*}"};
    option (google.api.method_signature) = "name";
  }

  // ListKeyRevisions lists authorization key revisions that matches given request.
  // The key revisions are derived from the parent key.
  rpc ListKeyRevisions(ListKeyRevisionsRequest) returns (ListKeyRevisionsResponse) {
    option (google.api.http) = {get: "/v1alpha/{parent=projects/*/keys/*}/revisions"};
    option (google.api.method_signature) = "parent";
    option (blocky.api.query_params) = {
      pagination: {
        max_size: 100,
        default_size: 20,
      }
      order_by: "create_time desc"
    };
  }

  // RevokeKeyRevision revokes an authorization key revision.
  // Once revoked the key revision is no longer valid for signing and verification.
  // If revoked key was the only active signing key, the system will not accept
  // any new requests until a new key is created and activated.
  rpc RevokeKeyRevision(RevokeKeyRevisionRequest) returns (KeyRevision) {
    option (google.api.http) = {post: "/v1alpha/{name=projects/*/keys/*/revisions/*}:revoke"};
    option (google.api.method_signature) = "name";
  }
}

// The request message for
// [AuthzAdminService.CreateKey][blocky.authz.admin.v1alpha.AuthzAdminService.CreateKey].
message CreateKeyRequest {
  // Required. The resource name of the project in which to create the key.
  // Format: 'projects/{project}'.
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "cloudresourcemanager.blockyapis.com/Project"}
  ];

  // Required, resource to create.
  Key key = 2 [(google.api.field_behavior) = REQUIRED];
}

// The request message for
// [AuthzAdminService.GetKey][blocky.authz.admin.v1alpha.AuthzAdminService.GetKey].
message GetKeyRequest {
  // Required. The resource name of the key to retrieve.
  // Format: 'projects/{project}/keys/{key}'.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "authz.blockyapis.com/Key"}
  ];
}

// The request message for
// [KeyAdminService.ListKeys][blocky.authz.admin.v1alpha.KeyAdminService.ListKeys].
message ListKeysRequest {
  // Required. The resource name of the project whose keys are to be listed.
  // Format: 'projects/{project}'.
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "cloudresourcemanager.blockyapis.com/Project"}
  ];

  // Optional. The maximum number of Keys to return in the response. The
  // server allows a maximum of 300 Keys to return. If unspecified, the
  // server will use 50 as the default, unless its configuration specifies
  // a smaller default.
  int32 page_size = 2 [(google.api.field_behavior) = OPTIONAL];

  // Optional. A pagination token returned from a previous call to
  // ListKeysRequest that indicates where this listing should continue from.
  string page_token = 3 [(google.api.field_behavior) = OPTIONAL];
}

// The response message for
// [KeyAdminService.ListKeys][blocky.authz.admin.v1alpha.KeyAdminService.ListKeys].
message ListKeysResponse {
  // List of keys matching the request.
  repeated Key keys = 1;

  // Token to retrieve the next page of results, or empty if there are no
  // more results in the list.
  string next_page_token = 2;
}

// The request message for
// [KeyAdminService.UpdateKey][blocky.authz.admin.v1alpha.KeyAdminService.UpdateKey].
message UpdateKeyRequest {
  // Required identifier of the key to update.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "authz.blockyapis.com/Key"}
  ];

  // Required, resource to update.
  Key key = 2 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to update.
  // If empty, all modifiable fields will be updated.
  google.protobuf.FieldMask update_mask = 3 [(google.api.field_behavior) = REQUIRED];
}


// The request message for
// [KeyAdminService.CreateKeyRevision][blocky.authz.admin.v1alpha.KeyAdminService.CreateKeyRevision].
message CreateKeyRevisionRequest {
  // Required identifier of the key to create a revision for.
  string parent = 1 [
    (google.api.resource_reference) = {type: "authz.blockyapis.com/Key"},
    (google.api.field_behavior) = REQUIRED
  ];

  // Required, resource to create.
  KeyRevision revision = 2 [(google.api.field_behavior) = REQUIRED];
}

// The request message for
// [KeyAdminService.GetKeyRevision][blocky.authz.admin.v1alpha.KeyAdminService.GetKeyRevision].
message GetKeyRevisionRequest {
  // Required identifier of the key revision to get.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "authz.blockyapis.com/KeyRevision"}
  ];
}

// The request message for
// [KeyAdminService.RevokeKeyRevision][blocky.authz.admin.v1alpha.KeyAdminService.RevokeKeyRevision].
message RevokeKeyRevisionRequest {
  // Required identifier of the key to revoke.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "authz.blockyapis.com/KeyRevision"}
  ];
}

// The request message for
// [KeyAdminService.ListKeyRevisions][blocky.authz.admin.v1alpha.KeyAdminService.ListKeyRevisions].
message ListKeyRevisionsRequest {
  // Required identifier of the key to list revisions for.
  string parent = 1 [
    (google.api.resource_reference) = {type: "authz.blockyapis.com/Key"},
    (google.api.field_behavior) = REQUIRED
  ];

  // Optional page_size on the number of key revisions to include in the response.
  int32 page_size = 2 [(google.api.field_behavior) = OPTIONAL];

  // Optional page token to continue listing key revisions from.
  // If not provided, the service will start listing from the beginning.
  string page_token = 3 [(google.api.field_behavior) = OPTIONAL];
}

// The response message for
// [KeyAdminService.ListKeyRevisions][blocky.authz.admin.v1alpha.KeyAdminService.ListKeyRevisions].
message ListKeyRevisionsResponse {
  // List of key revisions for the requested key.
  repeated KeyRevision key_revisions = 1;

  // Token to continue listing key revisions from.
  // If there are no more key revisions to list, the token is not included.
  string next_page_token = 2;
}