// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package blocky.keys.admin.v1alpha;

import "blocky/keys/type/keys.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/blockysource/go-genproto/blocky/authz/admin/v1alpha;authzadminv1alpha";

// Key is a cryptographic key used for signing, verification and encryption.
// It contains information about the key, such as algorithm, name,
// creation time, as well as information about its activation and rotation.
//
// The core is used to derive authorization key used for signing and verification.
// Once the key is being rotated, a new key derives actual parameters from the core.
// This may change the new key properties like priority.
//
// Once a new key revision is derived in addition to its own name,
// it is also assigned an alias 'latest' which is used to refer to the latest key.
// The full path of the latest key core derivation is:
// 'projects/{project}/keys/{keys}/revisions/latest'
message Key {
  option (google.api.resource) = {
    type: "keys.blockyapis.com/Key"
    pattern: "projects/{project}/keys/{key}"
  };

  // The resource name of the key.
  // Format: 'projects/{project}/keys/{key}'
  string name = 1 [(google.api.field_behavior) = IDENTIFIER];

  // The unique server-generated UUID identifier for the key revision.
  // It could be used as the key revision identifier in its resource name.
  string uid = 2 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.field_behavior) = IMMUTABLE
  ];

  // The aliases that can be used to refer to the key.
  // The full path of the alias is:
  // 'projects/{project}/keys/{key_alias}'
  // Any modification of aliases needs to be done via the KeyAdminService API.
  repeated string aliases = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The parameters used to derive the key.
  SigningKeyParameters signing_parameters = 4;
  EncryptionKeyParameters encryption_parameters = 5;

  // The display name of the key.
  string display_name = 6 [(google.api.field_behavior) = NON_EMPTY_DEFAULT];

  // Time when the key was created.
  google.protobuf.Timestamp create_time = 7 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Time when the key was updated.
  google.protobuf.Timestamp update_time = 8 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Time when the key was last rotated.
  google.protobuf.Timestamp last_rotated_time = 9 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Rotation interval of the revision derived from this key.
  // If not provided, the key will not be rotated automatically.
  google.protobuf.Duration rotation_interval = 10 [(google.api.field_behavior) = OPTIONAL];

  // Is the number of keys derived from this core.
  int32 revisions_number = 11 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// RSA key parameters.
message RSAKeyParameters {
  // The size of the RSA key in bits.
  // It must be a multiple of 8.
  int32 key_size = 1 [(google.api.field_behavior) = REQUIRED];
}

// Elliptic curve based key parameters.
message EllipticCurveKeyParameters {
  // The curve used for the ECDSA key.
  keys.type.EllipticCurve curve = 1 [(google.api.field_behavior) = REQUIRED];
}

// Edwards curve based key parameters. (OKP)
message OkpKeyParameters {
  // The curve used for the OKP key.
  keys.type.OKPCurve curve = 1 [(google.api.field_behavior) = REQUIRED];
}

// HMAC key parameters.
message HmacKeyParameters {
  // The hash algorithm used for HMAC.
  keys.type.HashAlgorithm hash_algorithm = 1 [(google.api.field_behavior) = REQUIRED];
}

// SigningKeyParameters contains information about the key used for signing.
message SigningKeyParameters {
  // Algorithm used for signing.
  keys.type.SignatureAlgorithm algorithm = 1 [(google.api.field_behavior) = REQUIRED];
}

// EncryptionKeyParameters contains information about the key used for encryption.
message EncryptionKeyParameters {
  // Algorithm used for encryption.
  keys.type.KeyManagementAlgorithm algorithm = 1 [(google.api.field_behavior) = REQUIRED];
}

